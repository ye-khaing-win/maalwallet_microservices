// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: proto/tokens.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "tokens";

export enum ChainNamespace {
  CHAIN_NAMESPACE_UNSPECIFIED = 0,
  CHAIN_NAMESPACE_EIP155 = 1,
  CHAIN_NAMESPACE_SOLANA = 2,
  UNRECOGNIZED = -1,
}

export interface ChainResponse {
  id: string;
  name: string;
  chainId: string;
  chainNamespace: string;
  rpcUrl: string;
}

export interface ListChainRequest {
}

export interface ListChainResponse {
  chains: ChainResponse[];
}

export interface GetChainRequest {
  id: string;
}

export interface CreateChainRequest {
  name: string;
  chainId: string;
  chainNamespace: string;
  rpcUrl: string;
  displayName: string;
  explorerUrl: string;
}

export const TOKENS_PACKAGE_NAME = "tokens";

export interface ChainsServiceClient {
  list(request: ListChainRequest): Observable<ListChainResponse>;

  get(request: GetChainRequest): Observable<ChainResponse>;

  create(request: CreateChainRequest): Observable<ChainResponse>;
}

export interface ChainsServiceController {
  list(request: ListChainRequest): Promise<ListChainResponse> | Observable<ListChainResponse> | ListChainResponse;

  get(request: GetChainRequest): Promise<ChainResponse> | Observable<ChainResponse> | ChainResponse;

  create(request: CreateChainRequest): Promise<ChainResponse> | Observable<ChainResponse> | ChainResponse;
}

export function ChainsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["list", "get", "create"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ChainsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ChainsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CHAINS_SERVICE_NAME = "ChainsService";
